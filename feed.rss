<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>sookim-1</title><description>Weekly Episodes</description><link>https://sookim-1.github.io/k-swift-publish-blog</link><language>ko</language><lastBuildDate>Tue, 19 Aug 2025 09:57:43 +0000</lastBuildDate><pubDate>Tue, 19 Aug 2025 09:57:43 +0000</pubDate><ttl>250</ttl><atom:link href="https://sookim-1.github.io/k-swift-publish-blog/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://sookim-1.github.io/k-swift-publish-blog/posts/002-20240213</guid><title>번호 : 002, 작성일자: 2024-02-13</title><description>Dart언어 학습, Sentry 도입, CI/CD 고도화</description><link>https://sookim-1.github.io/k-swift-publish-blog/posts/002-20240213</link><pubDate>Tue, 13 Feb 2024 15:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>번호 : 002, 작성일자: 2024-02-13</h1><h2>2024.02.05 ~ 2024.02.12</h2><h3>🚴🏻‍♂️ Dart 언어 접근</h3><hr><p>지난 주부터 노마드코더에서 진행하는 Flutter챌린지를 시작했다.</p><p>Flutter는 Dart라는 프로그래밍언어를 사용 중이기 때문에 Dart언어에 대해서 먼저 시작했다.</p><p>Dart언어를 공부하면서 가장 신기했던 점은 컴파일러가 다양하다는 점이였고 대부분의 문법은 최신 프로그래밍언어들과 큰 차이가 없는 것 같았다.</p><p>Dart언어특징, 변수, 자료형, 함수, 클래스에 대해서 이번주 모두 강의가 끝났다.</p><p>강의의 특징은 Dart언어의 모든 부분을 학습하는 것이 아니라 Flutter를 사용하는데 필요한 수준정도로만 진행하는 것 같았다.</p><h3>🚀 Sentry</h3><hr><p>모바일앱에서 충돌이 발생했을 때 어떤 이유로 충돌이 발생했는지 알려주는 서비스로 대표적으로 Firebase Crashlytics를 사용한다.</p><p>Firebase Crashlytics는 무료이고 모바일이라는 범주안에서는 괜찮은 선택인 것 같다. 하지만 서버가 충돌했을 때 로그를 기록하기 위해서 Sentry라는 서비스도 좋은 도구라고 한다.</p><p>Sentry를 확인해보고 느낀 점은 조금 더 충돌이유와 충돌시점에 스크린샷, 뷰의 상관관계등 옵션들이 매우 다양했다.</p><h3>🛫 CI/CD</h3><hr><p>Firebase AppDistribution란? 앱파일을 배포한 후 해당 서비스를 이용하여 앱을 다운로드하고 테스트할 수 있는 서비스다. 기존의 Apple에서 사용하는 TestFlight와 유사하지만 안드로이드는 TestFlight를 사용할 수 없지만 AppDistribution은 안드로이드, iOS 모두 사용가능하다.</p><p>iOS에서 사용하기 위해서는 AppTester라는 앱을 다운로드 받아야한다. 하지만 앱을 직접 다운로드할 수는 없고 웹사이트 바로가기형태로 앱을 다운로드 받을 수 있다. iOS에서 사용했을 때 느낀점은 속도는 TestFlight보다 빠른 것 같지만 프로파일설정도 해야하고 기기등록도해야하는 등 처음설정하는 부분이 복잡한 것 같았다. 그래서 안드로이드를 배포할 예정이 없는 프로젝트의 경우는 접근성이 편리한 TestFlight를 자주 사용할 것 같다.</p><p>지지난주에 만든 Slack Slash를 이용하여 배포하는 작업을 조금 변형하여 Jenkins를 이용해서 Bitbucket pipeline을 트리거하려고 Jenkins에 대해서 공부했다. 하지만 Jenkins에서 해당 파이프라인을 실행하기 위해서는 동작하는 머신이 Mac이여야 한다.</p><h3>🙋🏻‍♂️ 기타 사항</h3><hr><ol><li>네이버지도 SDK에서는 카메라영역을 제한하여 지도가 제한한 영역밖으로 이동하지 못하게 하는 기능이 있다.</li><li>FCM토큰을 관리할 때 옛날에는 직접 재발급하는 코드를 제공해왔지만 현재기준으로 공식문서에서는 직접 재발급하는 작업을 권장하지 않는 것 같다.</li></ol>]]></content:encoded></item><item><guid isPermaLink="true">https://sookim-1.github.io/k-swift-publish-blog/posts/001-20240205</guid><title>번호: 001, 작성일자: 2024-02-05</title><description>iOS 자동배포 구축, 블로그 생성</description><link>https://sookim-1.github.io/k-swift-publish-blog/posts/001-20240205</link><pubDate>Mon, 5 Feb 2024 15:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>번호: 001, 작성일자: 2024-02-05</h1><h2>2024.01.29 ~ 2024.02.04</h2><h3>🛫 Slack + Flask + Bitbucket Pipeline + Fastlane</h3><hr><p>Slack 명령어를 이용하여 Testflight에 배포하는 방법이 있다고 하여서 적용해보았다.</p><p>기존프로젝트에서 작업을 진행하면 테스트버전이 계속 추가되어 TestFlight에 버전관리가 힘들어 질것 같아서 새로운 프로젝트에서 작업을 진행했다.</p><p>작업은 Slack Slash명령어를 입력하면 Flask앱에서 Bitbucket Pipeline을 trigger한 후, Pipeline에서 Fastlane명령어를 실행하여 TestFlight에 배포되는 작업이였다.</p><p>모두 완료 후 도입하게 된다면 bitbucket Pipeline을 빌드하기 위한 Runner가 self-hosted를 통해 진행해야 하므로 원격호스팅을 도입해야 하는 제약이 있지만 만약 Github Action을 사용하면 해결될 수 도 있을 것 같다.</p><h3>🙋🏻‍♂️ 기타 사항</h3><hr><p>티스토리 블로그와 Velog, 깃허브 블로그들의 장단점에 대해서 분석해보고 기존의 Velog의 카테고리 관리가 불편하다고 느껴서 개발관련 글은 모두 티스토리블로그로 이전하고 깃허브블로그에서는 회고록을 작성하도록 정했다.</p><p>관련 링크</p><ul><li><a href="https://sookim-1.tistory.com/">sookim's 티스토리 블로그</a></li><li><a href="https://velog.io/@sookim-1/posts">sookim's Velog</a></li><li><a href="https://sookim-1.github.io/">sookim's GithubBlog</a></li></ul>]]></content:encoded></item></channel></rss>